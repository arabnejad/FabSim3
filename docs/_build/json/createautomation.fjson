{
    "body": "<div class=\"section\" id=\"create-automation-scripts\">\n<span id=\"createautomation\"></span><h1>Create automation scripts<a class=\"headerlink\" href=\"#create-automation-scripts\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document briefly details how user/developers can create their own FabSim3 automations.</p>\n<div class=\"section\" id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li>Automation scripts allow user/developers to create their own FabSim3 functionalities. They are usually created and modified within individual plugins.</li>\n<li>Base automation scripts reside within the <code class=\"docutils literal notranslate\"><span class=\"pre\">base/</span></code> subdirectory. These should normally not be modified, but they can serve as examples to create your own functionalities, or as building blocks to create complex functions.</li>\n<li>Plugin-specific automation scripts reside within the base directory of the respective plugin. The script that will be invoked by default is <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;plugin_name&gt;.py</span></code>. For larger plugins, various other Python scripts can of course be imported in this main script.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"how-to-write-automation-functions\">\n<h2>How to write automation functions<a class=\"headerlink\" href=\"#how-to-write-automation-functions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li>All automation functions are written using Python 3.</li>\n<li>On top of that, they rely on shorthand functionalities as provided by Fabric3. See <a class=\"reference external\" href=\"http://docs.fabfile.org/en/1.14/usage/tasks.html\">documentation</a> for more information.</li>\n<li>Commands to be run on the local client side are called using <code class=\"docutils literal notranslate\"><span class=\"pre\">local()</span></code>.</li>\n<li>Commands to be run remotely are called using <code class=\"docutils literal notranslate\"><span class=\"pre\">run()</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"examples\">\n<h2>Examples<a class=\"headerlink\" href=\"#examples\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To access a remote resource and scan available modules for a specific name one could write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">probe</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;undefined&quot;</span><span class=\"p\">):</span>\n  <span class=\"sd\">&quot;&quot;&quot; Scans a remote site for the presence of certain software. &quot;&quot;&quot;</span>\n<span class=\"k\">return</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">&quot;module avail 2&gt;&amp;1 | grep </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">label</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This task can then be invoked on the archer supercomputer to search for LAMMPS modules by using</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fab</span> <span class=\"n\">archer</span> <span class=\"n\">probe</span><span class=\"p\">:</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">lammps</span>\n</pre></div>\n</div>\n<p>To run an arbitrary bash script locally one could write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">blackbox</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"o\">=</span><span class=\"s1\">&#39;test.sh&#39;</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Black-box script execution. &quot;&quot;&quot;</span>\n    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">local_blackbox_path</span><span class=\"p\">:</span>\n        <span class=\"n\">script_file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">script</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">script_file_path</span><span class=\"p\">)):</span>\n            <span class=\"n\">local</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">script_file_path</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">))</span>\n<span class=\"k\">return</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This function first navigates to the <code class=\"docutils literal notranslate\"><span class=\"pre\">blackbox/</span></code> subdirectory in the local Fabsim3 installation, and subsequently executes the <code class=\"docutils literal notranslate\"><span class=\"pre\">$script</span></code> in that directory. Also, the freehand use of <code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code> give a sequence of parameters etc.</p>\n</div>\n<p>To run LAMMPS on a remote host (part of FabMD) one could write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">lammps</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Submit a LAMMPS job to the remote queue.</span>\n<span class=\"sd\">    The job results will be stored with a name pattern as defined in the environment,</span>\n<span class=\"sd\">    e.g. cylinder-abcd1234-legion-256</span>\n<span class=\"sd\">    config : config directory to use to define geometry, e.g. config=cylinder</span>\n<span class=\"sd\">    Keyword arguments:</span>\n<span class=\"sd\">            cores : number of compute cores to request</span>\n<span class=\"sd\">            images : number of images to take</span>\n<span class=\"sd\">            steering : steering session i.d.</span>\n<span class=\"sd\">            wall_time : wall-time job limit</span>\n<span class=\"sd\">            memory : memory per node</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">update_environment</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">with_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">put_configs</span><span class=\"p\">,</span><span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"n\">job</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"o\">=</span><span class=\"s1\">&#39;lammps&#39;</span><span class=\"p\">,</span> <span class=\"n\">wall_time</span><span class=\"o\">=</span><span class=\"s1\">&#39;0:15:0&#39;</span><span class=\"p\">,</span> <span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"s1\">&#39;2G&#39;</span><span class=\"p\">),</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li>The combination of <code class=\"docutils literal notranslate\"><span class=\"pre\">**args</span></code> in the declaration with <code class=\"docutils literal notranslate\"><span class=\"pre\">update_environment(args)</span></code> at the start of the function allows users to specify arbitrary arguments on the command line, and to have those automatically loaded in to the FabSim3 environment.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">with_config()</span></code> loads in input files into FabSim3.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">execute(put_configs,config)</span></code> copies the configuration information to the right directory at the remote resource.</li>\n<li>On the last line, LAMMPS is run remotely (shown by <cite>script=\u2019lammps\u2019</cite>), and the values of <code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code> are passed on to that function as well, overriding the default <strong>wall_time</strong> and memory specification on that line if the user has specified those variables explicitly already.</li>\n</ul>\n<div class=\"section\" id=\"accessing-fabsim-commands-from-python-scripts\">\n<h3>Accessing FabSim commands from Python scripts<a class=\"headerlink\" href=\"#accessing-fabsim-commands-from-python-scripts\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To launch FabSim3 commands from Python scripts, we have established a basic Python API. This file can be found <a class=\"reference external\" href=\"https://github.com/djgroen/FabSim3/blob/master/lib/fabsim3_cmd_api.py\">here</a>.</p>\n<p>We recommend using this API rather than <code class=\"docutils literal notranslate\"><span class=\"pre\">os.system()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">subprocess()</span></code> directly, as it will allow us to fix any emerging bugs in future versions for you.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"create-config-directories\">\n<h1>Create Config Directories<a class=\"headerlink\" href=\"#create-config-directories\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<ul class=\"simple\">\n<li>Configuration information is stored in subdirectories of either <cite>config</cite> or <cite>plugins/&lt;module_name&gt;/configs</cite> (to be implemented).</li>\n<li>One directory should be created for each individual simulation problem type.</li>\n<li>Typically, input file names are standardized using default names, to reduce the number of user-specified arguments on the command line (e.g., config.xml for HemeLB).</li>\n<li>Examples for LAMMPS are provided in the base installation of FabSim3.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"fabsim-variables\">\n<h1>FabSim variables<a class=\"headerlink\" href=\"#fabsim-variables\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<dl class=\"docutils\">\n<dt>FabSim variables are represented in three different ways:</dt>\n<dd><ul class=\"first last\">\n<li><p class=\"first\">in <code class=\"docutils literal notranslate\"><span class=\"pre\">.yml</span></code> files as a key-value pair, e.g.:</p>\n<div class=\"highlight-yaml notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">number_of_cores</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">16</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">within the FabSim Python environment as a member of the env dictionary, e.g.:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">number_of_cores</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n<span class=\"ow\">or</span>\n<span class=\"n\">update_environment</span><span class=\"p\">({</span><span class=\"s2\">&quot;number_of_cores&quot;</span><span class=\"p\">:</span><span class=\"mi\">16</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">within templates as a <code class=\"docutils literal notranslate\"><span class=\"pre\">$</span></code> denominated variable, which is to be substituted. For example:</p>\n</li>\n</ul>\n</dd>\n</dl>\n<div class=\"section\" id=\"how-variables-are-obtained-or-introduced\">\n<h2>How variables are obtained or introduced:<a class=\"headerlink\" href=\"#how-variables-are-obtained-or-introduced\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Variable are obtained from the following sources:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>Parsed from <code class=\"docutils literal notranslate\"><span class=\"pre\">.yml</span></code> files such as <code class=\"docutils literal notranslate\"><span class=\"pre\">machines.yml</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">machines_user.yml</span></code>, which are loaded on startup.</li>\n<li>Explicitly written/created in the Python code environment. This should be implemented such that the third method will still override this method.</li>\n<li>Overridden or introduced using command-line arguments.</li>\n</ol>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"how-variables-are-applied\">\n<h2>How variables are applied:<a class=\"headerlink\" href=\"#how-variables-are-applied\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ol class=\"arabic simple\">\n<li>Directly, by reading values from <code class=\"docutils literal notranslate\"><span class=\"pre\">env.&lt;variable_name&gt;</span></code> in the Python code base.</li>\n<li>Through template substitution, where instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">$&lt;variable_name&gt;</span></code> are replaced with <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;variable_value&gt;</span></code> in the substitution output.</li>\n</ol>\n<div class=\"section\" id=\"example-of-applying-a-variable\">\n<h3>Example of applying a variable<a class=\"headerlink\" href=\"#example-of-applying-a-variable\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<blockquote>\n<div><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_sim</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Submit a my_sim job to the remote queue.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">test_var</span> <span class=\"o\">=</span> <span class=\"mf\">300.0</span> <span class=\"c1\"># test variable is set to a default value in the FabSim environment.</span>\n    <span class=\"c1\"># This will override any defaults set in other parts of FabSim (e.g. machines_user.yml)</span>\n\n    <span class=\"n\">update_environment</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"c1\"># If a value for test_var is given as a command-line argument,</span>\n    <span class=\"c1\"># then the default set above will be overridden.</span>\n\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">sim_args</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-test-var=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">test_var</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Optional example how to use your created variable</span>\n    <span class=\"c1\"># to create some parameter syntax for your job.</span>\n\n    <span class=\"n\">test_sim</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"c1\"># start a fictitious job, with the variable present in your FabSim environment.</span>\n</pre></div>\n</div>\n</div></blockquote>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"creating-job-submission-templates\">\n<h1>Creating Job Submission Templates<a class=\"headerlink\" href=\"#creating-job-submission-templates\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<blockquote>\n<div><ul class=\"simple\">\n<li>Job submission templates are used to convert FabSim environmental information to batch job scripts which can be submitted to remote resource schedulers.</li>\n<li>Domain-independent templates are stored in <code class=\"docutils literal notranslate\"><span class=\"pre\">deploy/templates</span></code>, while domain-specific templates should be stored in <code class=\"docutils literal notranslate\"><span class=\"pre\">deploy/&lt;module_name&gt;/templates</span></code>.</li>\n<li>Templates consist of two parts, <cite>Header templates</cite> which are scheduler-specific, and <cite>job execution</cite> templates which are code-specific.</li>\n<li>Normally, one new template needs to be added when adding a new machine definition to FabSim3, regardless of the number of codes used on that machine.</li>\n<li>Also one new template needs to be added for each new code definition to FabSim3, regardless of the number of machines supported.</li>\n</ul>\n</div></blockquote>\n<div class=\"section\" id=\"header-templates\">\n<h2>Header templates<a class=\"headerlink\" href=\"#header-templates\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Header templates are usually created as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>Take a batch script header example from the user guide of the respective resource.</li>\n<li>Any existing variable denoted with $name should normally be replaced with <code class=\"docutils literal notranslate\"><span class=\"pre\">$$name</span></code> (to prevent substitution with FabSim variables).</li>\n<li>Any hard-coded value should be replaced with a FabSim environment variable name, prefixed with a <code class=\"docutils literal notranslate\"><span class=\"pre\">$</span></code> symbol.</li>\n<li>One then needs to ensure that the respective variables are properly created in FabSim3, e.g. by adding default definitions for them to <code class=\"docutils literal notranslate\"><span class=\"pre\">machines.yml</span></code> if necessary.</li>\n</ol>\n</div></blockquote>\n<div class=\"section\" id=\"example\">\n<h3>Example<a class=\"headerlink\" href=\"#example\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The example below is the batch header template for the SuperMUC supercomputer.</p>\n<blockquote>\n<div><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"ch\">#!/bin/bash</span>\n<span class=\"c1\">##</span>\n<span class=\"c1\">## Copyright (C) University College London, 2007-2012, all rights reserved.</span>\n<span class=\"c1\">##</span>\n<span class=\"c1\">## This file is part of HemeLB and is CONFIDENTIAL. You may not work</span>\n<span class=\"c1\">## with, install, use, duplicate, modify, redistribute or share this</span>\n<span class=\"c1\">## file, or any part thereof, other than as allowed by any agreement</span>\n<span class=\"c1\">## specifically made by you with University College London.</span>\n<span class=\"c1\">###</span>\n<span class=\"c1\">## optional: energy policy tags</span>\n<span class=\"c1\">##</span>\n<span class=\"c1\"># DO NOT USE environment = COPY_ALL</span>\n\n<span class=\"c1\">#@ job_name = $job_name_template_sh</span>\n<span class=\"c1\">#@ job_type = $job_type</span>\n<span class=\"c1\">#@ output = job$$(jobid).out</span>\n<span class=\"c1\">#@ error = job$$(jobid).err</span>\n<span class=\"c1\">#@ class = $job_class</span>\n<span class=\"c1\">#@ tasks_per_node = $corespernode</span>\n<span class=\"c1\">#@ island_count = $island_count</span>\n<span class=\"c1\">#@ node = $nodes</span>\n<span class=\"c1\">#@ wall_clock_limit = $wall_time</span>\n<span class=\"c1\">#@ network.MPI = sn_all,shared,us</span>\n<span class=\"c1\">#@ notification = never</span>\n<span class=\"c1\">#@ initialdir = .</span>\n<span class=\"c1\">#@ node_usage = shared</span>\n<span class=\"c1\">#@ queue</span>\n\n\n<span class=\"c1\"># setup modules</span>\n. /etc/profile\n. /etc/profile.d/modules.sh\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li>Here, <code class=\"docutils literal notranslate\"><span class=\"pre\">#&#64;</span> <span class=\"pre\">output</span> <span class=\"pre\">=</span> <span class=\"pre\">job$$(jobid).out</span></code> will become <code class=\"docutils literal notranslate\"><span class=\"pre\">#&#64;</span> <span class=\"pre\">output</span> <span class=\"pre\">=</span> <span class=\"pre\">job$(jobid).out</span></code> after templating, preserving the supercomputer-specific environment variable.</li>\n<li>However, <code class=\"docutils literal notranslate\"><span class=\"pre\">#&#64;</span> <span class=\"pre\">node</span> <span class=\"pre\">=</span> <span class=\"pre\">$nodes</span></code> will for example become <code class=\"docutils literal notranslate\"><span class=\"pre\">#&#64;</span> <span class=\"pre\">node</span> <span class=\"pre\">=</span> <span class=\"pre\">16</span></code> if the env.nodes value within FabSim3 equals to <code class=\"docutils literal notranslate\"><span class=\"pre\">16</span></code>.</li>\n<li>Note also that the (MPI) execution command should not reside in this template, as this is supplied separately.</li>\n</ul>\n</div></blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"job-execution-templates\">\n<h2>Job execution templates<a class=\"headerlink\" href=\"#job-execution-templates\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Job execution templates are typically straightforward in their structure, and usually contain just a few preparation commands and a generic MPI job execution formulation.</p>\n<p>Here is an example job execution template for the LAMMPS code:</p>\n<blockquote>\n<div><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">cd</span> <span class=\"nv\">$job_results</span> <span class=\"c1\"># change directory to the FabSim results dir. Featured in almost all templates.</span>\n<span class=\"nv\">$run_prefix</span>     <span class=\"c1\"># run preparatory commands, as specified within FabSim.</span>\n\ncp -r <span class=\"nv\">$job_config_path</span>/* . <span class=\"c1\"># Copy over initial conditions to results directory. Featured in almost all templates.</span>\n/usr/bin/env &gt; env.log     <span class=\"c1\"># Store local supercomputer environment variables. Featured in almost all templates.</span>\n<span class=\"nv\">$run_command</span> <span class=\"nv\">$lammps_exec</span> <span class=\"nv\">$lammps_args</span> &lt; <span class=\"nv\">$lammps_input</span> &gt; log.lammps <span class=\"c1\"># Generically formulated LAMMPS execution command.</span>\n</pre></div>\n</div>\n</div></blockquote>\n<p>The last command will likely depend on how parameters are passed to the target code.</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">$run_command</span></code> will be substituted by a job execution command such as <code class=\"docutils literal notranslate\"><span class=\"pre\">mpirun</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">aprun</span></code>.</li>\n<li>other variables contain code/domain-specific information such as input and output destinations, relevant flags or the location of the executable.</li>\n</ul>\n</div></blockquote>\n</div>\n</div>\n",
    "title": "Create automation scripts",
    "sourcename": "createautomation.rst.txt",
    "current_page_name": "createautomation",
    "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Create automation scripts</a><ul>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#how-to-write-automation-functions\">How to write automation functions</a></li>\n<li><a class=\"reference internal\" href=\"#examples\">Examples</a><ul>\n<li><a class=\"reference internal\" href=\"#accessing-fabsim-commands-from-python-scripts\">Accessing FabSim commands from Python scripts</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#create-config-directories\">Create Config Directories</a></li>\n<li><a class=\"reference internal\" href=\"#fabsim-variables\">FabSim variables</a><ul>\n<li><a class=\"reference internal\" href=\"#how-variables-are-obtained-or-introduced\">How variables are obtained or introduced:</a></li>\n<li><a class=\"reference internal\" href=\"#how-variables-are-applied\">How variables are applied:</a><ul>\n<li><a class=\"reference internal\" href=\"#example-of-applying-a-variable\">Example of applying a variable</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#creating-job-submission-templates\">Creating Job Submission Templates</a><ul>\n<li><a class=\"reference internal\" href=\"#header-templates\">Header templates</a><ul>\n<li><a class=\"reference internal\" href=\"#example\">Example</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#job-execution-templates\">Job execution templates</a></li>\n</ul>\n</li>\n</ul>\n",
    "page_source_suffix": ".rst"
}