{
    "body": "<p id=\"createautomation\">This document briefly details how user/developers can create their own FabSim3 automations.</p>\n<div class=\"section\" id=\"overview\">\n<h1>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<ul class=\"simple\">\n<li>Automation scripts allow user/developers to create their own FabSim3 functionalities. They are usually created and modified within individual plugins.</li>\n<li>Base automation scripts reside within the <code class=\"docutils literal notranslate\"><span class=\"pre\">base/</span></code> subdirectory. These should normally not be modified, but they can serve as examples to create your own functionalities, or as building blocks to create complex functions.</li>\n<li>Plugin-specific automation scripts reside within the base directory of the respective plugin. The script that will be invoked by default is <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;plugin_name&gt;.py</span></code>. For larger plugins, various other Python scripts can of course be imported in this main script.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"how-to-write-automation-functions\">\n<h1>How to write automation functions<a class=\"headerlink\" href=\"#how-to-write-automation-functions\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<ul class=\"simple\">\n<li>All automation functions are written using Python 3.</li>\n<li>On top of that, they rely on shorthand functionalities as provided by Fabric3. See <a class=\"reference external\" href=\"http://docs.fabfile.org/en/1.14/usage/tasks.html\">documentation</a> for more information.</li>\n<li>Commands to be run on the local client side are called using <code class=\"docutils literal notranslate\"><span class=\"pre\">local()</span></code>.</li>\n<li>Commands to be run remotely are called using <code class=\"docutils literal notranslate\"><span class=\"pre\">run()</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"examples\">\n<h1>Examples<a class=\"headerlink\" href=\"#examples\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>To access a remote resource and scan available modules for a specific name one could write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">probe</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;undefined&quot;</span><span class=\"p\">):</span>\n  <span class=\"sd\">&quot;&quot;&quot; Scans a remote site for the presence of certain software. &quot;&quot;&quot;</span>\n<span class=\"k\">return</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">&quot;module avail 2&gt;&amp;1 | grep </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">label</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This task can then be invoked on the archer supercomputer to search for LAMMPS modules by using</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fab</span> <span class=\"n\">archer</span> <span class=\"n\">probe</span><span class=\"p\">:</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">lammps</span>\n</pre></div>\n</div>\n<p>To run an arbitrary bash script locally one could write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">blackbox</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"o\">=</span><span class=\"s1\">&#39;test.sh&#39;</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot; Black-box script execution. &quot;&quot;&quot;</span>\n    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">local_blackbox_path</span><span class=\"p\">:</span>\n        <span class=\"n\">script_file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">script</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">script_file_path</span><span class=\"p\">)):</span>\n            <span class=\"n\">local</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">script_file_path</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">))</span>\n<span class=\"k\">return</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This function first navigates to the <code class=\"docutils literal notranslate\"><span class=\"pre\">blackbox/</span></code> subdirectory in the local Fabsim3 installation, and subsequently executes the <code class=\"docutils literal notranslate\"><span class=\"pre\">$script</span></code> in that directory. Also, the freehand use of <code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code> give a sequence of parameters etc.</p>\n</div>\n<p>To run LAMMPS on a remote host (part of FabMD) one could write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">lammps</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Submit a LAMMPS job to the remote queue.</span>\n<span class=\"sd\">    The job results will be stored with a name pattern as defined in the environment,</span>\n<span class=\"sd\">    e.g. cylinder-abcd1234-legion-256</span>\n<span class=\"sd\">    config : config directory to use to define geometry, e.g. config=cylinder</span>\n<span class=\"sd\">    Keyword arguments:</span>\n<span class=\"sd\">            cores : number of compute cores to request</span>\n<span class=\"sd\">            images : number of images to take</span>\n<span class=\"sd\">            steering : steering session i.d.</span>\n<span class=\"sd\">            wall_time : wall-time job limit</span>\n<span class=\"sd\">            memory : memory per node</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">update_environment</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">with_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">put_configs</span><span class=\"p\">,</span><span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"n\">job</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"o\">=</span><span class=\"s1\">&#39;lammps&#39;</span><span class=\"p\">,</span> <span class=\"n\">wall_time</span><span class=\"o\">=</span><span class=\"s1\">&#39;0:15:0&#39;</span><span class=\"p\">,</span> <span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"s1\">&#39;2G&#39;</span><span class=\"p\">),</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li>The combination of <code class=\"docutils literal notranslate\"><span class=\"pre\">**args</span></code> in the declaration with <code class=\"docutils literal notranslate\"><span class=\"pre\">update_environment(args)</span></code> at the start of the function allows users to specify arbitrary arguments on the command line, and to have those automatically loaded in to the FabSim3 environment.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">with_config()</span></code> loads in input files into FabSim3.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">execute(put_configs,config)</span></code> copies the configuration information to the right directory at the remote resource.</li>\n<li>On the last line, LAMMPS is run remotely (shown by <cite>script=\u2019lammps\u2019</cite>), and the values of <code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code> are passed on to that function as well, overriding the default <strong>wall_time</strong> and memory specification on that line if the user has specified those variables explicitly already.</li>\n</ul>\n<div class=\"section\" id=\"accessing-fabsim-commands-from-python-scripts\">\n<h2>Accessing FabSim commands from Python scripts<a class=\"headerlink\" href=\"#accessing-fabsim-commands-from-python-scripts\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To launch FabSim3 commands from Python scripts, we have established a basic Python API. This file can be found <a class=\"reference external\" href=\"https://github.com/djgroen/FabSim3/blob/master/lib/fabsim3_cmd_api.py\">here</a>.</p>\n<p>We recommend using this API rather than <code class=\"docutils literal notranslate\"><span class=\"pre\">os.system()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">subprocess()</span></code> directly, as it will allow us to fix any emerging bugs in future versions for you.</p>\n</div>\n</div>\n",
    "title": "Overview",
    "sourcename": "createautomation.rst.txt",
    "current_page_name": "createautomation",
    "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#how-to-write-automation-functions\">How to write automation functions</a></li>\n<li><a class=\"reference internal\" href=\"#examples\">Examples</a><ul>\n<li><a class=\"reference internal\" href=\"#accessing-fabsim-commands-from-python-scripts\">Accessing FabSim commands from Python scripts</a></li>\n</ul>\n</li>\n</ul>\n",
    "page_source_suffix": ".rst"
}